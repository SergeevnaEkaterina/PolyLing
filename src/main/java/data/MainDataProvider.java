package data;

import java.util.Arrays;
import java.util.List;

public class MainDataProvider {
    public static final String TEXT_EXCELLENT = "К сожалению, мы не можем быть уверены, что разработчик исправил все найденные проблемы внутри IDE перед коммитом. Один из способов гарантировать отсутствие критичных проблем в коде — внедрить Qodana прямо в CI/CD-пайплайн. Если нельзя пофиксить все сразу, вы сможете выбрать критичные проблемы, добавить их в baseline и постепенно разбирать тех. долг, не замедляя разработку, но при этом контролируя появление новых проблем.\n" +
            "Иногда релизный процесс сложен и зависит от множества ручных действий. Часто это целиком ручной релиз: какой-то артефакт собирается одним из разработчиков, потом сборка передается тестировщикам и проверяется, затем передается человеку, который умеет доставлять ее на боевое окружение. Здесь есть много узких мест — представьте, если кто-то из этих людей уйдет в отпуск или заболеет. \n" +
            "Выводится релиз-кандидат, который собирается с релиз-ветки или с главной ветки — это фиксирует версию и позволяет быть уверенным, что на боевое окружение попадет только то, что было протестировано и никак не менялось в процессе. Это помогает отслеживать все релизы и изменения, которые в них попали, и сохранять артефакты стабильной версии для быстрого отката в случае неудачного релиза.";
    public static final String TEXT_BAD = "Что же такое «ворота качества», иначе говоря, проверки качества кода? Каждый день команда разработки пишет код для новых фич, которые могут сломать нашу крепость. Задача QA — тестировать каждую фичу и уменьшать вероятность попадания бага в код продукта. QA мало спит и нервничает, ведь процесс не автоматизирован и нет «сторожа», который контролирует все метрики, даже в самые опасные моменты, например в пятницу вечером, когда разработчик хотел бы пораньше убежать в выходные и доделать все задачи, не перенося их на новую неделю. В этот момент происходит злосчастный merge, который принесет много проблем позже. На рынке существует много разных статических анализаторов кода. Рассмотрим один из них под названием Qodana. Основное преимущество этого анализатора кода в том, что он содержит различные инспекции, доступные нам в средах разработки JetBrains, когда мы пишем код.\n" +
            "Многие наверняка использовали IDE-driven подход, когда IDE помогает вам писать код и указывает на различные ошибки: неоптимальное использование кода, необработанный NullPointerException, дубликаты и т. д. ";

    public static final List<String> SCORE_ATTRIBUTES = Arrays.asList("5/5", "Текст легок для восприятия.", "Поздравляем! Ваш текст идеален! Однако не забудьте о визуальном оформлении Вашего текста. Проверить уровень визуальной воспринимаемости текста Вы можете в специальном разделе нашего сервиса.");
    public static final List<String> SCORE_ATTRIBUTES_BAD = Arrays.asList("2/5", "Текст довольно сложен для восприятия.", "Попробуйте обратить внимание на следующие пункты, которые помогут повысить качество Вашего текста:", "Также не забывайте о визуальном оформлении Вашего текста! Проверить уровень визуальной воспринимаемости текста Вы можете в специальном разделе нашего сервиса.");



    public static final String URL = "https://www.spbstu.ru/media/edition/";
    public static final List<String> VISUAL_SCORE = Arrays.asList("10/11", "Поздравляем! Текст читается хорошо!", "Ниже перечислены критерии оценки визуального восприятия. Раскройте пункт, чтобы получить более подробную информацию о референсных значениях для каждого из критериев.");



}
